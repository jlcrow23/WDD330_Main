**Paragraph amendment

para.classList.add('important');
const newPara = document.createElement('p');
newPara.textContent = 'Another Paragraph';
para.appendChild(newPara);

or

$(para).addClass('important').append('<p>Another Paragraph</p>');

**More on Arrays

// flatten an array
_.flatten([1, [2, [3, [4]], 5]]);
<< [1, 2, [3, [4]], 5]

// return the last element in an array
_.last([1, 2, 3]);
<< 3

// randomly shuffle an array
_.shuffle([1, 2, 3, 4]);
// => [4, 1, 3, 2]

**Functions on returns

function square(x) {
    return x * x;
}

function sum(array, callback) {
    if(callback) {
        array = array.map(callback);
    }
    return array.reduce((a,b) => a + b );
}

function variance(array) {
    return sum(array,square)/array.length - square(mean(array))
}

function mean(array) {
    return sum(array) / array.length;
}

export {
    variance,
    mean
}

** import into main.js
import  { mean, variance } from './stats.js';

EJS uses more explicit JavaScript coding to achieve the same result. Each line of JavaScript code is placed inside the special <% %> tags. If any values need to be evaluated, they are placed inside <%= %> instead:

Copy
<ul>
    <% tasks.forEach(function(task) { %>
    <li><%= task.name %></li>
    <% }); %>
    </ul>
    <% } %>>
Both of these templates would return this HTML code:

Copy
<ul>
    <li>Get Milk</li>
    <li>Go for a run</li>
    <li>Finish writing last chapter</li>
    <li>Phone bank</li>
    <li>Email Craig</li>
    </ul>

**Math in one string

    var myMaths={square:function(n){return n*n},sum:function(n,t){return t&&(n=n.map(t)),n.reduce(function(n,t){return n+t})},mean:function(n){return this.sum(n)/n.length},variance:function(n){return this.sum(n,this.square)/n.length-this.square(this.mean(n))}};